#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author : Safinez BOUMAIZA
purpose : Describe the UTCI variable and the four different parameters (Ta, tmrt-Ta, Va and RH)
For this study we will be interested in the UTCI value generated by the fast calculation
"""


# Import packages
import pandas as pd
import statistics
import numpy as np
import matplotlib.pyplot as plt
import datetime


def data_management(input_file1,input_file2 ):
    '''
    This function aims to gather two dataframes into one based on the datetime column, calculate tmrt-Ta
    :param input_file: name of the data file to import
    :return: One input file (dataframe)
    '''
    # Import Data
    final_data = pd.read_excel(input_file1, indexcol=0)
    utci_tmrt = pd.read_excel(input_file2, indexcol=0)
    utci_tmrt.rename(columns={utci_tmrt.columns[0]: "datetime"}, inplace=True)

    # Jointure
    df_joined_inputs = pd.merge(left=final_data, right=utci_tmrt, left_on='datetime', right_on='datetime')

    # TMRT-Ta calculation
    df_joined_inputs['tmrt-ta'] = df_joined_inputs['T_mrt'] - df_joined_inputs['Temp_air_2m']

    # Creation of the table_offset
    df_interest_inputs = df_joined_inputs[
        ['datetime', 'Temp_air_2m', 'tmrt-ta', 'WindSpeed', 'RelativeHumidity', 'UTCI']]

    ## Round
    df_final_input = df_interest_inputs.round({"Temp_air_2m": 0, "tmrt-ta": 0, "WindSpeed": 1, 'RelativeHumidity': 0})

    return df_final_input


if __name__ == "__main__":
    pd.set_option('display.max_columns', None)
    # Import data
    df_input = data_management('final_data.xlsx', 'UTCI_TMRT.xlsx')

    # Prepare data for statistical analysis
    df_to_analyse = df_input.copy()
    print(len(df_to_analyse))

    ## Convert the strings to datetime in the our pandas dataframe
    df_to_analyse['datetime'] = pd.to_datetime(df_to_analyse['datetime'], errors='coerce')
    ## Add columns for date, time, hour and min
    df_to_analyse['date'] = df_to_analyse.datetime.dt.date
    df_to_analyse['hour'] = df_to_analyse.datetime.dt.hour
    df_to_analyse['time'] = df_to_analyse.datetime.dt.time
    df_to_analyse['minute'] = df_to_analyse.datetime.dt.minute
    print(df_to_analyse['date'].unique())

    # Selection of days of reference
    ## List of days of reference
    days_of_ref = ['2019-08-24', '2019-08-30']
    ## Converting the list of days to a date
    days_of_ref_date = []
    for d in days_of_ref:
        days_of_ref_date.append(datetime.datetime.strptime(d, "%Y-%m-%d").date())
    print(len(days_of_ref_date))
    print(days_of_ref_date)

    ## Filtering the data based on the list of days of reference
    df_to_analyse_filtered = df_to_analyse[df_to_analyse['date'].isin(days_of_ref_date)]
    print(len(df_to_analyse_filtered))
    print(df_to_analyse_filtered['date'].unique())

    ## Plot the distribution of each parameter for each day of reference
    for d in range(len(days_of_ref_date)):
        df_to_analyse_filtered = df_to_analyse_filtered.loc[df_to_analyse_filtered['date'] == days_of_ref_date[d]]
        #df_to_plot_filtered_day = df_to_plot_filtered_day.groupby(['hour'], as_index=False).mean()

        # Plots
        x = df_to_analyse_filtered['datetime']
        y = df_to_analyse_filtered['UTCI']
        plt.plot(x, y)
        plt.ylim(bottom = 0)
        plt.title(days_of_ref_date[d], color="navy", style='oblique')
        plt.xlabel("Time")
        plt.ylabel("UTCI")

        plt.show()
    """
        # Data description
        ## General Description
        print(df_input.describe().round(2))
        print(df_input.median())
        print(df_input.isnull())
        print(df_input.isna())

        print(pd.unique(df_to_analyse['date']))

        ## Description of the distribution of each variable
        ax1 = df_to_analyse.plot.scatter(x = 'datetime' , y ='UTCI', c = 'DarkBlue', colormap = 'viridis')
        ax2 = df_to_analyse.plot.scatter(x='datetime', y='Temp_air_2m', c='DarkBlue', colormap='viridis')
        ax3 = df_to_analyse.plot.scatter(x='datetime', y='tmrt-ta', c='DarkBlue', colormap='viridis')
        ax4 = df_to_analyse.plot.scatter(x='datetime', y='WindSpeed', c='DarkBlue', colormap='viridis')
        ax5 = df_to_analyse.plot.scatter(x='datetime', y='RelativeHumidity', c='DarkBlue', colormap='viridis')

        plt.show()

        ## Plot the Temp and the UTCI on the same plot in order to choose the days of reference

        ### create figure and axis objects with subplots()
        fig, ax = plt.subplots()
        ### make a plot
        ax.scatter(df_to_analyse['datetime'], df_to_analyse['UTCI'], color="darkred")
        ### set x-axis label
        ax.set_xlabel("date", fontsize=14)
        ### set y-axis label
        ax.set_ylabel("UTCI", color="darkred", fontsize=14)
        # twin object for two different y-axis on the sample plot
        ax2 = ax.twinx()
        ### make a plot with different y-axis using second axis object
        ax2.scatter(df_to_analyse['datetime'], df_to_analyse['Temp_air_2m'], color="midnightblue")
        ax2.set_ylabel("Air temperature", color="midnightblue", fontsize=14)

        plt.show()
        """